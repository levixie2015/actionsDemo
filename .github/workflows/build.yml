name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # 添加写入权限

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # 更新到 v3

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3  # 更新到 v3
        with:
          java-version: '8'
          distribution: 'temurin'  # 指定发行版

      - name: Build with Maven
        run: mvn clean package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Windows EXE 打包
      - name: Setup Launch4j
        run: |
          wget https://downloads.sourceforge.net/project/launch4j/launch4j-3/3.14/launch4j-3.14-linux.tgz
          tar xzf launch4j-3.14-linux.tgz
          chmod +x launch4j/launch4j

      - name: Create Windows Executable
        run: |
          mkdir -p release/windows
          cp target/*.jar release/windows/app.jar
          
          # 创建 Launch4j 配置文件
          cat > config.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <launch4jConfig>
            <dontWrapJar>false</dontWrapJar>
            <headerType>gui</headerType>
            <jar>release/windows/app.jar</jar>
            <outfile>release/windows/app.exe</outfile>
            <errTitle>Error</errTitle>
            <cmdLine></cmdLine>
            <chdir>.</chdir>
            <priority>normal</priority>
            <downloadUrl>http://java.com/download</downloadUrl>
            <supportUrl></supportUrl>
            <stayAlive>false</stayAlive>
            <restartOnCrash>false</restartOnCrash>
            <manifest></manifest>
            <icon></icon>
            <jre>
              <path></path>
              <bundledJre64Bit>false</bundledJre64Bit>
              <bundledJreAsFallback>false</bundledJreAsFallback>
              <minVersion>1.8.0</minVersion>
              <maxVersion></maxVersion>
              <jdkPreference>preferJre</jdkPreference>
              <runtimeBits>64/32</runtimeBits>
            </jre>
          </launch4jConfig>
          EOF
          
          ./launch4j/launch4j config.xml
          cd release && zip -r windows-exe.zip windows/

      # macOS APP 打包
      - name: Create macOS App
        run: |
          mkdir -p release/macos
          cp target/*.jar release/macos/app.jar
          
          # 创建启动脚本
          echo "#!/bin/bash" > release/macos/start.sh
          echo "java -jar app.jar" >> release/macos/start.sh
          chmod +x release/macos/start.sh
          
          # 创建 app 目录结构
          mkdir -p release/macos/App.app/Contents/{MacOS,Resources,Java}
          cp release/macos/app.jar release/macos/App.app/Contents/Java/
          cp release/macos/start.sh release/macos/App.app/Contents/MacOS/
          
          # 创建 Info.plist
          cat > release/macos/App.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>start.sh</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.app</string>
            <key>CFBundleName</key>
            <string>App</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.10.0</string>
          </dict>
          </plist>
          EOF
          
          # 创建压缩包
          cd release/macos && zip -r ../macos-app.zip App.app/

      # 上传 Windows EXE
      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows-exe.zip
          asset_name: windows-exe.zip
          asset_content_type: application/zip

      # 上传 macOS APP
      - name: Upload macOS App
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/macos-app.zip
          asset_name: macos-app.zip
          asset_content_type: application/zip